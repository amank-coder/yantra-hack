// import React, { useEffect, useState } from 'react';
// import Layout from '../components/layout/Layout';
// import axios from 'axios';

// const Courseworth = () => {
  
//   const [link, setLink] = useState();
//   const [showq, setShowq] = useState(false);
//   const [currentId, setCurrentId] = useState("");

//   const user = JSON.parse(localStorage.getItem('user'))

//   const handleEnter = ()=>{
//     setShowq(true);
//   }
//   const [selectedVideo, setSelectedVideo] = useState(null);
//   const [showDetail, setShowdetail] = useState(false);
//   const [res1, setRes1] = useState('');
//   const [res2, setRes2] = useState('')
//   const [res3, setRes3] = useState('')
//   const [query, setQuery] = useState('');
//   const [result, setResult] = useState('');
//   const [review, setReview] = useState('')


//   const handleVideoSelect = (videoUrl) => {
//     setSelectedVideo(videoUrl);
//     console.log(videoUrl)
//     if(videoUrl=='video1')
//     {
//       setShowdetail(true);
//     }
//   };

//   const getDescription = async()=>{
//     const { data } = await axios.get('http://127.0.0.1:5000/discription');
//     console.log(data);
//     setRes1(data.response1);
//     setRes2(data.response2);
//     setRes3(data.response3);
//   }

//   const getReviews = async()=>{
//     const { data } = await axios.get('http://localhost:3000/api/course/getCourses',{
//         headers: {
//           Authorization: `Bearer ${localStorage.getItem("token")}`,
//         },
//       });
//     setReview(data);
    
//   }

//   const handleSubmit = async()=>{
//     console.log(query);
//     const { data } = await axios.post('http://127.0.0.1:5000/worth',{query});
//     setResult(data.answer);
//   }
// //   const selectedCourse = review.find(course => course._id === selectedVideo);
//   console.log("review",review)

//   useEffect(()=>{
//     getDescription();
//     getReviews();
//   },[])
//   return (
//     <Layout>
//       <div className="">
//         <div className="bg-blue-100 px-4 py-3 flex justify-between items-center mt-2 mr-4 rounded-lg">
//             <p className="font-bold text-gray-800">Know the Course worth</p>  
//           </div>
//           <div className='grid md:grid-cols-3 grid-cols-1 gap-4 mx-4 mt-8'>
//       <div className={` cursor-pointer ${selectedVideo === '6619c6532c51358e3259538a' ? 'hover:shadow-lg shadow-md shadow-blue-500 opacity-70' : ''}`} onClick={() => handleVideoSelect('6619c6532c51358e3259538a')}>
//         <img src='/thumb1.jpg' alt="Video 1" />
//         <p>Save Model to File</p>
//       </div>
//       <div className={`cursor-pointer ${selectedVideo === 'video2' ? 'hover:shadow-lg shadow-md shadow-blue-500 opacity-70' : ''}`} onClick={() => handleVideoSelect('video2')}>
//         <img src='thumb2.jpg' alt="Video 2" />
//         <p>Random Forest</p>
//       </div>
//       <div className={` cursor-pointer ${selectedVideo === 'video3' ? 'hover:shadow-lg shadow-md shadow-blue-500 opacity-70' : ''}`} onClick={() => handleVideoSelect('video3')}>
//         <img src='thumb3.jpg' alt="Video 3" />
//         <p>Prompt Engineering</p>
//       </div>
//     </div>
//     {showDetail && (
    //   <div className='mt-4 ml-2'>
    //     {/* <span className='font-semibold text-2xl'>Course name: </span> */}
    //     <span className='text-2xl font-bold'>LLM LangChain project using VectorDB</span><br />
    //     <span className='font-semibold'>Description: </span><span>In this video we will be creeating an end to end LLM Project with vector.Pinecone makes it easy to provide long-term memory for high-performance AI applications. Itâ€™s a managed, cloud-native vector database with a simple API and no infrastructure hassles. Pinecone serves fresh, filtered query results with low latency at the scale of billions of vectors. database</span><br />
        // <img src='/star.png' className='w-48 -ml-14'/>
    //     <div className='mb-4'><span className='font-semibold'>Created by: </span><span>Krish Naik</span><br /></div>
        // <span className='font-semibold realtive top-4'>Tech Stack </span><span>[Generated by AI]: </span><br /><span>{res1 ? res1 : <svg xmlns="http://www.w3.org/2000/svg" width="2em" height="2em" viewBox="0 0 24 24"><circle cx="18" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin=".67" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="12" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin=".33" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="6" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin="0" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle></svg>}</span><br />

        // <span className='font-semibold'>Topics Covered</span><span>[Generated by AI]: </span><br /><span>{res2 ? res2 : <svg xmlns="http://www.w3.org/2000/svg" width="2em" height="2em" viewBox="0 0 24 24"><circle cx="18" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin=".67" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="12" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin=".33" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="6" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin="0" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle></svg>}</span><br />
        // <span className='font-semibold'>Project Included</span><span>[Generated by AI]: </span><br /><span>{res3 ? res3 : <svg xmlns="http://www.w3.org/2000/svg" width="2em" height="2em" viewBox="0 0 24 24"><circle cx="18" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin=".67" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="12" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin=".33" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="6" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin="0" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle></svg>}</span><br />


    //     {/* {data.find((item)=>item._id=='6619c6532c51358e3259538a')?.name} */}
        // <div className="px-4 py-3 flex items-center justify-between mt-6 mr-4 -ml-4">
        //     <input type="text" placeholder="Type your query..." className="flex-1 bg-white rounded-full px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-md shadow-blue-300" onChange={(e)=>setQuery(e.target.value)}/>
        //     <button className="ml-2 bg-blue-500 text-white px-4 py-2 rounded-full hover:bg-blue-600 focus:outline-none focus:bg-blue-600" onClick={handleSubmit}>Send</button>
        //   </div>
        //   <div>
        //     <h2 className="font-semibold mt-4">Answer</h2>
        //     <p className='pb-6'>{result}</p>
        //   </div>

    //       <div className='mt-12'>
    //         {review.map((item)=>(
    //             <div>
    //                 <div>{item.name}</div>
    //             </div>
    //         ))}
    //       </div>
    //   </div>
      
//     )
    
//     }



//       </div>
//     </Layout>
//   );
// }

// export default Courseworth;


import React, { useEffect, useState } from 'react';
import Layout from '../components/layout/Layout';
import axios from 'axios';

const Courseworth = () => {
  const [courses, setCourses] = useState([]);
  const [selectedCourse, setSelectedCourse] = useState(null);
  const [reviewText, setReviewText] = useState('');

//   const selectedCourse = review.find(course => course._id === selectedVideo);

  useEffect(() => {
    // Fetch course data from API or any other source
    const fetchData = async () => {
      try {
        const response = await axios.get('http://localhost:3000/api/course/getCourses', {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        });
        setCourses(response.data);
      } catch (error) {
        console.error("Error fetching course data:", error);
      }
    };

    fetchData();
  }, [reviewText]);

  const handleCourseClick = (course) => {
    setSelectedCourse(course);
  };

  const handleReviewSubmit = async () => {
    if (reviewText.trim() === '') {
      alert('Please enter your review.');
      return;
    }

    console.log(reviewText)
    console.log(selectedCourse?._id)
    try {
      const response = await axios.patch(`http://localhost:3000/api/course/update/${selectedCourse._id}`, {
        review: reviewText,
      },{
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
      });

      // Assuming your API returns updated course data, you can update the course state here
      setSelectedCourse(response.data.updatedCourse);
      setReviewText('');
      alert('Review submitted successfully!');
    } catch (error) {
      console.error('Error submitting review:', error);
      alert('An error occurred while submitting your review. Please try again later.');
    }
  };
  return (
    <Layout>
      <div className="">
        <div className="bg-purple-100 px-4 py-3 flex justify-between items-center mt-2 mr-4 rounded-lg">
          <p className="font-bold text-gray-800">Know the Course worth</p>
        </div>

        <div className='grid md:grid-cols-3 grid-cols-1 gap-4 mx-4 mt-8'>
          {courses.map(course => (
            <div key={course._id} className={`cursor-pointer ${selectedCourse && selectedCourse._id === course._id ? 'hover:shadow-lg shadow-md shadow-blue-500 opacity-70' : ''}`} onClick={() => handleCourseClick(course)}>
              <img src={course.imgUrl} alt={`Thumbnail for ${course.name}`} />
              <p>{course.name}</p>
            </div>
          ))}
        </div>


        {/* DETAILS */}
        {selectedCourse && (
            <div className='mt-4 ml-2'>
        {/* <span className='font-semibold text-2xl'>Course name: </span> */}
        <span className='font-semibold'>Description: </span><span>{selectedCourse?.description}</span><br />
        <img src='/star.png' className='w-48 -ml-14'/>
        <div className='mb-4'><span className='font-semibold'>Created by: </span><span>{selectedCourse?.createdBy}</span><br /></div>
        
        <span className='font-semibold realtive top-4'>Tech Stack </span><span>[Generated by AI]: </span><br />
        <span>
        { 
            <svg xmlns="http://www.w3.org/2000/svg" width="2em" height="2em" viewBox="0 0 24 24"><circle cx="18" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin=".67" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="12" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin=".33" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="6" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin="0" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle></svg>
        }
        </span>

        <br />

        <span className='font-semibold'>Topics Covered</span><span>[Generated by AI]: </span><br /><span>{<svg xmlns="http://www.w3.org/2000/svg" width="2em" height="2em" viewBox="0 0 24 24"><circle cx="18" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin=".67" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="12" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin=".33" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="6" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin="0" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle></svg>
        }
        </span>
        
        <br />

        <span className='font-semibold'>Project Included</span><span>[Generated by AI]: </span><br /><span>{<svg xmlns="http://www.w3.org/2000/svg" width="2em" height="2em" viewBox="0 0 24 24"><circle cx="18" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin=".67" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="12" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin=".33" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="6" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin="0" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle></svg>
        }
        </span>
        
        <br />

        

        {/* CHAT */}
        <div className="px-4 py-3 flex items-center justify-between mt-6 mr-4 -ml-4">
            <input type="text" placeholder="Type your query..." className="flex-1 bg-white rounded-full px-4 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500 shadow-md shadow-purple-300"/>
            <button className="ml-2 bg-purple-500 text-white px-4 py-2 rounded-full hover:bg-purple-600 focus:outline-none focus:bg-purple-600">Send</button>
        </div>

        <div>
            <h2 className="font-semibold mt-4">Answer</h2>
            <p className='pb-6'></p>
        </div>

        {/* REVIEWS */}
        <div className='mt-12'>
            <h2 className='text-2xl'>Reviews</h2>
            {selectedCourse && selectedCourse.reviews.map((review, index) => (
            <p key={index}>{review}</p>
            ))}
            <div>
                <p>Write a review: </p>
                <div className="mt-4">
                    <textarea
                        rows="4"
                        cols="50"
                        placeholder="Write your review..."
                        value={reviewText}
                        onChange={(e) => setReviewText(e.target.value)}
                        className="border border-gray-300 rounded-md p-2"
                    />
                </div>
       
                <div className="mt-2">
                    <button
                        onClick={handleReviewSubmit}
                        className="bg-purple-500 p-2 rounded-md"
                    >
                        Submit Review
                    </button>
                </div>
            </div>
        </div>

    </div>

    

    )}
      </div>
    </Layout>
  );
}

export default Courseworth;
