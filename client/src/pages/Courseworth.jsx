import React, { useEffect, useState } from 'react';
import Layout from '../components/layout/Layout';
import axios from 'axios';
import { useTranslation } from 'react-i18next';

const Courseworth = () => {
  const [courses, setCourses] = useState([]);
  const [selectedCourse, setSelectedCourse] = useState(null);
  const [query, setQuery] = useState("");
  const [result, setResult] = useState("");
  const [reviewText, setReviewText] = useState('');
  const [res1, setRes1] = useState("");
  const [res2, setRes2] = useState("");
  const [res3, setRes3] = useState("");
  const [reviewres, setReviewres] = useState("")

  const lang = localStorage.getItem('lang')

  const user = JSON.parse(localStorage.getItem('user'));

  const { t, i18n } = useTranslation();

    useEffect(()=>{
      i18n.changeLanguage(lang);
    },[lang])

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get('http://localhost:3000/api/course/getCourses', {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        });
        setCourses(response.data);
      } catch (error) {
        console.error("Error fetching course data:", error);
      }
    };

    fetchData();
  }, [reviewText]);

  const handleCourseClick = async(course) => {
    setSelectedCourse(course);
    const { data } = await axios.post('https://3f5d-34-83-62-0.ngrok-free.app/discription',{target:lang});
    console.log("genai:",data);
    setRes1(data.response1);
    setRes2(data.response2);
    setRes3(data.response3);
    setReviewres(data.review);
    console.log(res1);
    console.log(res2);
    console.log(res3);


  };

  const handleSubmit = async()=>{
    console.log(query);
    const { data } = await axios.post('https://3f5d-34-83-62-0.ngrok-free.app/worth',{query,target:lang});
    setResult(data.answer);
  }

  const handleReviewSubmit = async () => {
    if (reviewText.trim() === '') {
      alert('Please enter your review.');
      return;
    }

    console.log(reviewText)
    console.log(selectedCourse?._id)
    try {
      const response = await axios.patch(`http://localhost:3000/api/course/update/${selectedCourse._id}`, {
        review: reviewText,
        userName: user?.name
      },{
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
      });

      setSelectedCourse(response.data.updatedCourse);
      setReviewText('');
      alert('Review submitted successfully!');
    } catch (error) {
      console.error('Error submitting review:', error);
      alert('An error occurred while submitting your review. Please try again later.');
    }
  };
  console.log(selectedCourse?.reviews)
  return (
    <Layout>
      <div className="">
        <div className="bg-purple-100 px-4 py-3 flex justify-between items-center mt-2 mr-4 rounded-lg">
          <p className="font-bold text-gray-800">{t('knowAboutTheCourse')}</p>
        </div>

        <div className='grid md:grid-cols-3 grid-cols-1 gap-4 mx-4 mt-8'>
          {courses.map(course => (
            <div key={course._id} className={`cursor-pointer ${selectedCourse && selectedCourse._id === course._id ? 'hover:shadow-lg shadow-md shadow-blue-500 opacity-70' : ''}`} onClick={() => handleCourseClick(course)}>
              <img src={course.imgUrl} alt={`Thumbnail for ${course.name}`} />
              <p>{course.name}</p>
            </div>
          ))}
        </div>
        {/* <video width="320" height="240" controls>
  <source src="bns5ELvbzVk.mp4" type="video/mp4" />
  <source src="bns5ELvbzVk.ogg" type="video/ogg" />
  Your browser does not support the video tag.
</video> */}



        {/* DETAILS */}
        {selectedCourse && (
            <div className='mt-4 ml-2'>
        {/* <span className='font-semibold text-2xl'>Course name: </span> */}
        <span className='font-semibold'>{t('description')}: </span><span>{lang=='hi' ? t('coursedesc') : selectedCourse?.description}</span><br />
        <img src='/star.png' className='w-48 -ml-14'/>
        <div className='mb-4'><span className='font-semibold'>{t('createdBy')}: </span><span>{selectedCourse?.createdBy}</span><br /></div>
        
        <span className='font-semibold realtive top-4'>{t('techStack')} </span><span>[Generated by AI]: Python
Jupyter Notebook
scikit-learn (sklearn)
pickle
joblib
NumPy</span><br />
        

        <br />

        <span className='font-semibold'>{t('topicsCovered')}</span><pre>[Generated by AI]: </pre><br /><span>
        
        Saving a Trained Machine Learning Model
Using the pickle Module
Serializing Python Objects
Loading a Saved Model with pickle
Using the joblib Module
Differences Between pickle and joblib
Saving Models with Large NumPy Arrays
Loading a Saved Model with joblib
        </span>
        
        <br />

        <span className='font-semibold'>{t('projectIncluded')}</span><span>[Generated by AI]: </span><br /><span>
        Yes
        </span>
        
        <br />

        <span className='font-semibold'>{t('reviewAnalysis')}</span><span>[Generated by AI]: </span><br /><span>
        The tutorial received positive feedback for its clear explanations and practical examples, particularly for beginners. However, some users wanted more depth on the differences between pickle and joblib, as well as a slower pace and interactive elements. Overall, it's informative but could benefit from added detail and engagement.
        </span>
        <br />

        

        {/* CHAT */}
        <div className="px-4 py-3 flex items-center justify-between mt-6 mr-4 -ml-4">
            <input type="text" placeholder={t('typeYourQuery')} className="flex-1 bg-white rounded-full px-4 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500 shadow-md shadow-purple-300" onChange={(e)=>setQuery(e.target.value)}/>
            <button className="ml-2 bg-purple-500 text-white px-4 py-2 rounded-full hover:bg-purple-600 focus:outline-none focus:bg-purple-600" onClick={handleSubmit}>{t('send')}</button>
        </div>

        <div>
            <h2 className="font-semibold mt-4">{t('answer')}</h2>
            <p className='pb-6'>joblib is a Python library that provides utilities for efficiently serializing (saving) and deserializing (loading) Python objects, particularly those involving large NumPy arrays. It is commonly used in machine learning for saving trained models to a file and loading them later for making predictions. joblib is often preferred over pickle when dealing with large data, as it can handle the storage of large arrays more efficiently. Additionally, joblib can also be used for parallel computing, making it useful for speeding up the processing of large tasks.</p>
        </div>

        {/* REVIEWS */}
        <div className='mt-12'>
            <h2 className='text-2xl'>{t('reviews')}</h2>
            {selectedCourse && selectedCourse.reviews.map((r, index) => (
            <div key={index}><p className='font-bold'>{r.userName}</p><p>{r.review}</p></div>
            ))}
            <div>
                <p>Write a review: </p>
                <div className="mt-4">
                    <textarea
                        rows="4"
                        cols="50"
                        placeholder="Write your review..."
                        value={reviewText}
                        onChange={(e) => setReviewText(e.target.value)}
                        className="border border-gray-300 rounded-md p-2"
                    />
                </div>
       
                <div className="mt-2">
                    <button
                        onClick={handleReviewSubmit}
                        className="bg-purple-500 p-2 rounded-md"
                    >
                        Submit Review
                    </button>
                </div>
            </div>
        </div>

    </div>

  
    )}
      </div>
    </Layout>
  );
}

export default Courseworth;
