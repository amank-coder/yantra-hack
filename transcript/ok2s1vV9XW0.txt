Title: Machine Learning Tutorial Python - 11 Random ForestS
random forest algorithm is another popular machine learning technique used in regression and classification both now why is it called random forest well the forest has trees and a tree in machine learning world means a decision tree now if you haven't seen my decision tree tutorial then you should click on that pause button right now go watch decision tree tutorial and then come back here assuming you watch this what we try to do in that tutorial is predict employee salary based on certain features and we build a decision tree like this now this decision tree looks very complicated so can you represent it in a very simple image well yeah there you have it you have green samples red samples and based on that you build your decision tree now how can you build a multiple decision trees out of this single data set well one approach is you take your data set then you divide it into batch of random data sets then you build decision tree for each of them so since we did random sampling here is called random forest and now we have multiple trees so you see a forest being formed already once it is trained you give the thing that you want to predict and they will all come up with different decision you just may take a majority what out of it and get a decision so this is the basic crux behind the random forest algorithm and i recently used similar approach to make a decision in my real life i wanted to buy nest thermostat and i called bunch of my friends and yeah by the way that's me in the picture and those smart dudes gave me different opinions one guy told me you know it's gonna save you so much money i saved like 500 last year so you should buy it the other friends say oh it's freaking 200 it's a waste of money don't buy it third guy told me oh you can control your temperature remotely anywhere from outside so definitely buy it all i did is just took a majority what and decided to buy it see making decisions is so simple in life just call your friends and take a majority war all right it doesn't work all the time but at least in this case it worked and i had a decision and i'm not making this up i just installed it yesterday all right now we're going to use sk learns digits data set to make a classification using random forest so that data set basically contains the images of handwritten characters and all you're trying to do is just classify into one of these 10 categories where there is a digit from 0 to 10 all right so that's what we will do in our python coding today and in the end we'll have an interesting exercise for you to solve as usual i have launched my jupyter notebook and loaded the digits data set from sklearn dataset all right and if i look at the properties of this data set it has the real data and the target right now i'm going to use matplotlib to visualize my data and when i run this it looks like this so i have basically hand written characters which is like 8 by 8 pixel array it's like a multi-dimensional array and when i use matplotlib it looks like this you can see this is character 0 1 2 3 and so on okay now i will create a pandas data frame from this data set so digits data basically data is if you see if you want to see it just to make it simple you will see that it is a two dimensional array of numbers so let's look at first five see first five like each element is just a two dimensional it's it's actually one dimensional array but it's like eight by eight matrix so the length of this array is 64. okay and you can visualize this in a better way if you are using data frame each sample is nothing but an array of 64 integers and they map to the target variable so if you do digits.target it is showing the target variable and i'm going to append that into my data frame this is how you create a new column in pandas data frame this is nothing but digits dot target and when i look at my df.head it says that this 64 uh samples they map to zero all right so for example this picture here is actually zero so this target is showing you the truth all right now what i'm going to do is use train test split so i will do from sklearn dot model selection [Music] train day split once you import that you need x train x test y train y test okay and train day split now my x is just a set of independent variables now my df already has target so i need to drop target from that okay so i'm going to drop target and access this columns and my y is is digits.target and you need to specify how you want to split your training and test data when i say test size equal to 0.2 it means 20 percent of my sample is test data and 80 percent are training okay when i run this it created all these four variables and when you look at size of your x train it is 1437 whereas x days is this so this means uh 20 percent of your total samples so now i have a nice training and test samples i can use now the random forest classifier or to train my model all right so from sklearn dot ensemble now why is it called ensemble ansible is a term used when you are using multiple algorithms to predict the outcome all right that's what we are doing here we are building multiple decision trees and uh taking a majority what to come up with our final outcome so that's why it's called ensembl from that import random forest classifier okay and then just call model.fit this is your training step after this step your model will be trained and it train the model and you can see a bunch of parameters here so the genie and entropy criteria is something that you studied in the decision tree tutorial already so that's what this is you also have estimators so here 10 means it used 10 random trace okay and we are going to see the performance using the 10 random tree so let's call model dot score on x test and y test and we can see that the accuracy is 91 okay when we use 10 random trees the accuracy was 91 percent now let me try to tune this model and by and by giving 20 random trees so i train it using 20 trees you can see my score is increasing all right i had more trees and my score increase if i do 30 wow it's even better okay so looks like now it's not changing much all right so 40 or 50 trees uh you can get a base score so you can uh fine-tune your model by taking this parameter it also depends on your samples as well so if i execute this line once again then now my training set has changed and it might give me a different result so you see it perform even better now your model is strained and you can give any sample input which is nothing but this kind of handwritten character image and it will tell you what number that is all right now i'm going to plot a confusion matrix to kind of see the distribution of errors and where my model perform well versus where it performed poorly and for that i need x predicted so here i can use model.predict on my x test data set and i get y predicted this is predicted by model this is the truth okay and confusion matrix allows you to plot truth on one axis and the prediction on the other axis from sklearn sklearn.matrix import confusion matrix and i'm just going to call it cm here uh you first supply your truth and then you supply your prediction and when you plot this is gonna plot two dimensional array all right now this is probably not a better way to visualize it so i'm going to use a cbon visualization library and i'm just going to copy paste code just to save some typing it's the same confusion matrix but it's visually more pleasing okay so here you have your throat data you have your prediction and what this means is i had 46 0 and 46 time it predicted them to be zero so for zero it perf it performed like really well now what does what does this two means this two means i had two times the truth was eight but my model predicted it to be one so this is where it made an error thirty time the truth was eight and it predicted uh it to be eight right so this this is a nice visualization which allows you to gauge the performance of your model and you should use it uh more often all right now the most interesting part which is an exercise we are going to use our famous iris dataset from sklearn.dataset to predict the iris pieces and for that we'll use a random forest classifier so i want you to train your model using the default and estimator parameters and then try to tweak it and tell me what base score you can achieve by using how many trees all right you should do this exercise if you are not going to do this exercise then you are going to make me very very angry alright so just be afraid of me and just do it

S